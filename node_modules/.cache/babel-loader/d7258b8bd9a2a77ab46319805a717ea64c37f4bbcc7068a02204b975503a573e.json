{"ast":null,"code":"var _jsxFileName = \"/Users/ryes/Downloads/WH/R3F_samples/shoeInst/src/index.js\";\nimport { createRoot } from 'react-dom/client';\nimport { Stats } from '@react-three/drei';\nimport './style.css';\nimport App from './App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\ncreateRoot(document.getElementById('root')).render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Stats, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this)]\n}, void 0, true));\n/* function Shoe({ random, color = new THREE.Color(), ...props }) {\n  const ref = useRef()\n  onst [hovered, setHover] = useState(false)\n  useFrame((state) => {\n    const t = state.clock.getElapsedTime() + random * 10000\n    ref.current.rotation.set(Math.cos(t / 4) / 2, Math.sin(t / 4) / 2, Math.cos(t / 1.5) / 2)\n    ref.current.position.y = Math.sin(t / 1.5) / 2\n    ref.current.scale.x = ref.current.scale.y = ref.current.scale.z = THREE.MathUtils.lerp(ref.current.scale.z, hovered ? 1.4 : 1, 0.1)\n    ref.current.color.lerp(color.set(hovered ? 'red' : 'white'), hovered ? 1 : 0.1)\n  })\n  return (\n    <group {...props}>\n      <Instance ref={ref} /* onPointerOver={(e) => (e.stopPropagation(), setHover(true))} onPointerOut={(e) => setHover(false)}/>\n    </group>\n  )\n} */","map":{"version":3,"names":["createRoot","Stats","App","jsxDEV","_jsxDEV","Fragment","_Fragment","document","getElementById","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/ryes/Downloads/WH/R3F_samples/shoeInst/src/index.js"],"sourcesContent":["import { createRoot } from 'react-dom/client'\nimport { Stats } from '@react-three/drei'\nimport './style.css'\nimport App from './App'\n\ncreateRoot(document.getElementById('root')).render(\n  <>\n    <App />\n    <Stats />\n  </>,\n)\n/* function Shoe({ random, color = new THREE.Color(), ...props }) {\n  const ref = useRef()\n  onst [hovered, setHover] = useState(false)\n  useFrame((state) => {\n    const t = state.clock.getElapsedTime() + random * 10000\n    ref.current.rotation.set(Math.cos(t / 4) / 2, Math.sin(t / 4) / 2, Math.cos(t / 1.5) / 2)\n    ref.current.position.y = Math.sin(t / 1.5) / 2\n    ref.current.scale.x = ref.current.scale.y = ref.current.scale.z = THREE.MathUtils.lerp(ref.current.scale.z, hovered ? 1.4 : 1, 0.1)\n    ref.current.color.lerp(color.set(hovered ? 'red' : 'white'), hovered ? 1 : 0.1)\n  })\n  return (\n    <group {...props}>\n      <Instance ref={ref} /* onPointerOver={(e) => (e.stopPropagation(), setHover(true))} onPointerOut={(e) => setHover(false)}/>\n    </group>\n  )\n} */"],"mappings":";AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,KAAK,QAAQ,mBAAmB;AACzC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEvBN,UAAU,CAACO,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC,CAACC,MAAM,eAChDL,OAAA,CAAAE,SAAA;EAAAI,QAAA,gBACEN,OAAA,CAACF,GAAG;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACPV,OAAA,CAACH,KAAK;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAAA,eACT,CACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}